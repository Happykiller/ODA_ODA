---
title: Documentation
template: default
---
# I8n

> Cette partie concerne la partie cliente

> Cette partie traitera de l'internationalisation

> Le mécanisme est simple suivant votre configuration vous disposez de deux fichiers de contenu
 `vendor/oda/resources/i8n/i8n.json` dans le framework et un autre dans l'application `i8n/i8n.json`, celui de
  l'application surclasse celui du framework. Dans ces fichiers vous pourrez construire pour chaque langue désirée
  un couple tag-valeur, regrouper par groupe.

## Mèthode $.Oda.I8n.get

> C'est la méthode de base pour récupérer la valeur d'un tag pour la locale actuelle.

1. Les paramètres
* `p_group` : (chaine de caractère) Pour selectioner le groupe dans lequel la méthode ira cherger la valeur du tag
* `p_tag` : (chaine de caractère) Le tag pour lequel la valeur est souhaité
2. Le retour
* Si le tag est trouvé sa valeur sera retourné, sinon la valeur `Not define`.
3. Exemple d'appel
```
var tagValue = $.Oda.I8n.get('oda-project','userLabel');
```

# Securité

* Il est important de comprendre que la sécurité et les droits repose sur la notion de rang.
* Chaque rang possède un indice, l'indice sert à créer une structure de droit hierarchique.
* Lexique
- `api_tab_rangs` La table qui contient les différents rangs avec leur indice
- `api_tab_rang_api` La table qui défini les droits pour les api
- `api_tab_menu_rangs_droit` La table qui défini les droits pour les menus

## Menu & Accés au page

> Cette partie concerne la partie cliente

Le contrôle des accés aux pages se fait par le menu, si une page n'est pas dans le menu l'utilisateur n'a pas le droit de la consulter.

Une exeption si la page utilise la catégorie (Liens chachés).

Exemple dans la table `api_tab_menu_rangs_droit` nous pourrions trouver :
```
| id_rang       | id_menu       |
| ------------- | ------------- |
| 5             | ;1;2;3;       |
```

Cela signifie que les utilisateurs qui ont le rang 5 (visiteur par defaut) pourront visiter les pages avec les id 1,2,3.

## Clé Oda

Pour sécurisé les appels REST entre le client et le server, mais aussi pour assuré la SESSION, il existe une clé `keyAuthODA`.

Grâce à cette clé, le serveur connaîtra l'utilsateur et les droits.

1. Authentification

Pour s'authentifier il faut appeler en GET le REST suivant :

`<server>/<vendor>/happykiller/oda/resources/api/getAuth.php`

L'interface demande :

- login (String) : le code utilisateur
- mdp (String) : le mot de passe

L'interface retournera :

- keyAuthODA (String) :  la clé de votre session valable 12H

2. Appel sécurisé

Certaine interface seront sécurisés, il faudra alors fournir en plus des paramètres de propre à l'interface, la clé oda `keyAuthODA`.

3. Se déconnecter

Pour se déconnecter il faut appeler en GET le REST suivant :

`<server>/<vendor>/happykiller/oda/resources/api/deleteSession.php`

L'interface demande :

- key (String) : La clé de la session

## Interface

> Cette partie concerne la partie server

### Mode publique

Toutes les interfaces implémentes la class `OdaLibInterface`. Au moment de la création nous pouvons dire si l'interface sera publique ou non.

```
//Build the interface
$params = new OdaPrepareInterface();
$params->modePublic = false;
$INTERFACE = new OdaLibInterface($params);
```

Si l'interface est 'non' pulique, il faudra fournir un clé Oda valide.

### Interface privé suivant le rang

Si votre interface (ex : <monInterface>) est déclaré privé, et que dans la table `api_tab_rang_api` elle est déclaré des
restrictions seront appliqués.

Exemple :
```
| interface     | id_rang       | open          |
| ------------- | ------------- | ------------- |
| exemple       | 3             | 0             |
```

Dans cette exemple il est défini que l'interface qui contient le mot `exemple` (fichier `<server>/api/exemple.php`)
permet pour son mode privé que (car fermé open = `0`) pour les rangs inférieurs ou égale en indice au rang `3` (Responsable).

# Appel REST

> Cette partie concerne la partie cliente

La gestion des appels REST se fait dans le l'extension `$.Oda.Interface`, tout les appels au serveur se feront par cette extension.

## Mèthode callRest

Le méthode `callRest` est la méthode principale pour tout vos appels.

1. Les paramètres
* `p_url` : (chaine de caractère) Cela représente l'url de l'interface (ex : `http://domaine.com/api/interface`)
* `p_tabSetting` : (objet) l'objet contiendra tout les options pour l'appel, il supporte l'ensemble des paramtères de [jQuery.ajax([settings])](http://api.jquery.com/jquery.ajax/)
<ul>
  <li>
     <code>dataType</code> : (String) type du data soumis (ex : 'json')
  </li>
  <li>
     ... (autres paramètres standards)
  </li>
  <li>
     <code>functionRetour</code> : (function(response)) la fonction a exectué en cas de retour réussi, la seul présence de se paramètre suffit à déclarer l'appel <b>synchrone</b> ou <b>asynchrone</b>
  </li>
  <li>
     <code>odaCacheOnDemande</code> : (Boolean) Dans le cas d'une interface avec un cache optionable
  </li>
</ul>
* `p_tabInput` : (objet) l'objet contiendra tout les données nécéssaires ou optionelles pour l'interface

2. Le retour

Si l'appel est synchrone le retour sera du type (objet) contenant la réponse à l'appel, sinon il retourne l'exetention.

3. Exemple d'appel
```
var tabInput = { "data1" : "valeur1" };
$.Oda.Interface.callRest("domaine/api/interface", {functionRetour : function(response) {
    $.Oda.Log.trace(response);
}}, tabInput);
```

## Mode d'interface

Pour une application il est possible de définir un scénario d'utilisation des interfaces. Quatre modes sont disponibles `cache`, `ajax`, `mokup`, `offline`.

La définition de la stratégie se fait par le l'extention : `$.Oda.Context.modeInterface`, il faut choisir qu'elles méthodes seront utilisées et dans quel ordre.

Exemple :
```
$.Oda.Context.modeInterface = ["cache","ajax","mokup","offline"]
```

### cache

blabla

### mockup

### ajax

### offline

# Interface

> Cette partie concerne la partie serveur

## Construction

## mode de sortie